-- 1.:

quad :: Int -> Int
quad n = n * n

somaLista :: [Int] -> Int
somaLista [ ] = 0
somaLista (x:xs) = x + somaLista xs

verfc :: Int -> (Int, Bool)
verfc n = if n >= 0 then (n, True) else (n, False)

listaQuads :: [Int] -> [Int]
listaQuads l = map quad l

somaQuads :: [Int] -> Int
somaQuads l = somaLista listaQuads l

verificaSinal :: [Int] -> [(Int, Bool)]
verificaSinal l = map verfc l

-- 2.:

minF :: (t -> u) -> t -> u -> u
minF f n menor 
    |n >= 0 = minF f (n-1) (if valor < menor then valor else menor)
    |otherwise = menor
        where valor = f a

menorF :: (t -> u) -> t -> u
menorF f n = minF f n (f n)

testeIgual :: (t -> u) -> t -> Bool 
testeIgual f n 
    |n > 0 = if (f n) == (f (n-1)) then testeIgual (n-1) else False
    |otherwise = True

testePositivo :: (t -> u) -> t -> Bool 
testePositivo f n 
    |n >= 0 = if (f n) > 0 then testePositivo (n-1) else False
    |otherwise = True

testeCresc :: (t -> u) -> t -> Bool 
testeCresc f n 
    |n > 0 = if (f n) > (f (n-1)) then testeCresc (n-1) else False
    |otherwise = True


-- 3.:

trwice :: (Int -> Int) -> Int -> Int
trwice f n = f(f(f(n)))

-- 4.:

iter :: Int -> (t -> t) -> t
iter 0 f x = x
iter n f x = f(iter (n-1) f x)


main :: IO ()
main =  do





